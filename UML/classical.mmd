classDiagram
    %% This diagram represents a traditional classical blockchain 
    %% for comparison to the quantum-assisted implementation
    
    class Transaction {
        +str id
        +str sender
        +str receiver
        +float amount
        +float timestamp
        +to_dict() Dict
        +__str__() str
    }
    
    class Block {
        +int index
        +List~Transaction~ transactions
        +float timestamp
        +str previous_hash
        +int creator_id
        +int nonce
        +str hash
        +calculate_hash() str
        +to_dict() Dict
        +__str__() str
    }
    
    class Blockchain {
        +List~Block~ chain
        +List~Transaction~ pending_transactions
        +create_genesis_block() Block
        +get_latest_block() Block
        +add_transaction(transaction) bool
        +add_block(block) bool
        +validate_chain() bool
        +get_pending_transactions(max_tx) List~Transaction~
    }
    
    class ClassicalNode {
        +int node_id
        +Blockchain blockchain
        +Block current_candidate_block
        +create_candidate_block() Block
        +mine_block(difficulty) bool
        +receive_block(block) bool
    }
    
    class ClassicalNetwork {
        +int num_nodes
        +Blockchain blockchain
        +List~ClassicalNode~ nodes
        +int difficulty
        +generate_random_transactions(count) void
        +run_consensus_round() bool
        +run_simulation(num_rounds, tx_per_round) void
    }
    
    %% Traditional PoW mining functionality
    class ProofOfWork {
        <<module>>
        +mine_block(block, difficulty) bool
        +validate_pow(block, difficulty) bool
    }
    
    %% Relationships
    Blockchain *-- Block : contains
    Block *-- Transaction : contains
    ClassicalNode -- Blockchain : references
    ClassicalNetwork -- ClassicalNode : manages
    ClassicalNetwork -- Blockchain : manages
    ClassicalNode ..> ProofOfWork : uses