classDiagram
    class Transaction {
        +str id
        +str sender
        +str receiver
        +float amount
        +float timestamp
        +to_dict() Dict
        +__str__() str
    }
    
    class Block {
        +int index
        +List~Transaction~ transactions
        +float timestamp
        +str previous_hash
        +int creator_id
        +int nonce
        +str hash
        +Statevector quantum_state
        +Dict quantum_params
        +_load_transactions(transactions_data) List~Transaction~
        +calculate_hash() str
        +extract_quantum_parameters() Dict
        +to_dict(include_hash, include_state) Dict
        +__str__() str
    }
    
    class Blockchain {
        +List~Block~ chain
        +List~Transaction~ pending_transactions
        +create_genesis_block() Block
        +get_latest_block() Block
        +add_transaction(transaction) bool
        +add_block(block) bool
        +validate_chain() bool
        +get_pending_transactions(max_tx) List~Transaction~
    }
    
    class Node {
        +int node_id
        +int network_nodes_count
        +Blockchain blockchain
        +Block current_candidate_block
        +Statevector quantum_state
        +create_candidate_block() Block
        +prepare_quantum_state() Statevector
        +perform_consensus_round(all_states) int
        +receive_block(block) bool
    }
    
    class Network {
        +int num_nodes
        +Blockchain blockchain
        +List~Node~ nodes
        +generate_random_transactions(count) void
        +run_consensus_round() bool
        +run_simulation(num_rounds, tx_per_round) void
    }
    
    %% Quantum Utilities
    class QuantumUtils {
        <<module>>
        +AerSimulator SIMULATOR
        +int NUM_QUBITS
        +get_quantum_random_nonce(num_bits) int
        +get_entangled_q_RNG_bit(num_nodes) int
        +generate_verifiable_nonce(node_id, num_nodes, num_bits) int
        +extract_parameters_from_block(block) Dict
        +create_block_quantum_state(block) Statevector
        +calculate_fidelity(statevector1, statevector2) float
    }
    
    %% Relationships
    Blockchain *-- Block : contains
    Block *-- Transaction : contains
    Node -- Blockchain : references
    Network -- Node : manages
    Network -- Blockchain : manages
    Node ..> QuantumUtils : uses
    Block ..> QuantumUtils : uses